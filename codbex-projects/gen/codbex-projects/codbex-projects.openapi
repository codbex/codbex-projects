openapi: 3.0.3
info:
  title: Project Management - OpenAPI 3.0
  version: 1.0.0
  description: Project Management Module
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts
tags:
  - name: Project
  - name: Project
  - name: Status
  - name: entities
  - name: entities
  - name: Project
  - name: Project
  - name: entities
  - name: Deliverable
  - name: entities
  - name: Project
  - name: Project
  - name: entities
  - name: Deliverable
  - name: Task
  - name: Project
  - name: entities
  - name: TaskDependency
  - name: entities
  - name: WorkPackage
paths:
  /codbex-projects/gen/codbex-projects/api/Project/ResourceService.ts:
    get:
      summary: List Resource
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Resource'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Resource
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ResourceService.ts/{id}:
    get:
      summary: Get Resource by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Resource'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Resource by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Resource by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ResourceService.ts/count:
    get:
      summary: Count the number of Resource
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Resource by ResourceFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      ResourceItem: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      ResourceItem: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ResourceService.ts/search:
    post:
      summary: Search Resource by ResourceFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      ResourceItem: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      ResourceItem: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Resource'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ProjectService.ts:
    get:
      summary: List Project
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Project'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Project
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ProjectService.ts/{id}:
    get:
      summary: Get Project by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Project'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Project by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Project by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ProjectService.ts/count:
    get:
      summary: Count the number of Project
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Project by ProjectFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Notes: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ProjectService.ts/search:
    post:
      summary: Search Project by ProjectFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                      Notes: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Project'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Status/StatusService.ts:
    get:
      summary: List Status
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Status
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Status'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Status
      tags:
        - Status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Status/StatusService.ts/{id}:
    get:
      summary: Get Status by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Status
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Status'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Status by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Status by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Status
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Status/StatusService.ts/count:
    get:
      summary: Count the number of Status
      tags:
        - Status
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Status by StatusFilterOptions
      tags:
        - Status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Status/StatusService.ts/search:
    post:
      summary: Search Status by StatusFilterOptions
      tags:
        - Status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Status'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ResourceTypeService.ts:
    get:
      summary: List ResourceType
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ResourceType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ResourceType
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceType'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ResourceTypeService.ts/{id}:
    get:
      summary: Get ResourceType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ResourceType'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ResourceType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceType'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ResourceType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ResourceTypeService.ts/count:
    get:
      summary: Count the number of ResourceType
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ResourceType by ResourceTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceTypeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ResourceTypeService.ts/search:
    post:
      summary: Search ResourceType by ResourceTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceTypeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ResourceType'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/StatusTypeService.ts:
    get:
      summary: List StatusType
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StatusType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create StatusType
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusType'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/StatusTypeService.ts/{id}:
    get:
      summary: Get StatusType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StatusType'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update StatusType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusType'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete StatusType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/StatusTypeService.ts/count:
    get:
      summary: Count the number of StatusType
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of StatusType by StatusTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusTypeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/StatusTypeService.ts/search:
    post:
      summary: Search StatusType by StatusTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusTypeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/StatusType'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/BudgetService.ts:
    get:
      summary: List Budget
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Budget'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Budget
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/BudgetService.ts/{id}:
    get:
      summary: Get Budget by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Budget'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Budget by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Budget by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/BudgetService.ts/count:
    get:
      summary: Count the number of Budget
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Budget by BudgetFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/BudgetService.ts/search:
    post:
      summary: Search Budget by BudgetFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Budget'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/CostService.ts:
    get:
      summary: List Cost
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Cost'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Cost
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cost'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cost'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/CostService.ts/{id}:
    get:
      summary: Get Cost by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Cost'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Cost by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cost'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cost'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Cost by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/CostService.ts/count:
    get:
      summary: Count the number of Cost
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Cost by CostFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/CostService.ts/search:
    post:
      summary: Search Cost by CostFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Cost'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/CostCategoryService.ts:
    get:
      summary: List CostCategory
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CostCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CostCategory
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCategory'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/CostCategoryService.ts/{id}:
    get:
      summary: Get CostCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CostCategory'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CostCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCategory'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CostCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/CostCategoryService.ts/count:
    get:
      summary: Count the number of CostCategory
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CostCategory by CostCategoryFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCategoryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/CostCategoryService.ts/search:
    post:
      summary: Search CostCategory by CostCategoryFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostCategoryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CostCategory'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/MilestoneReportService.ts:
    get:
      summary: List MilestoneReport
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestoneReport'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create MilestoneReport
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestoneReport'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestoneReport'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/MilestoneReportService.ts/{id}:
    get:
      summary: Get MilestoneReport by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestoneReport'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update MilestoneReport by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestoneReport'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestoneReport'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete MilestoneReport by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/MilestoneReportService.ts/count:
    get:
      summary: Count the number of MilestoneReport
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of MilestoneReport by MilestoneReportFilterOptions
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestoneReportFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Implemented: "abcd"
                      Problems: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Implemented: "abcd"
                      Problems: "abcd"
                      Notes: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/MilestoneReportService.ts/search:
    post:
      summary: Search MilestoneReport by MilestoneReportFilterOptions
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestoneReportFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Implemented: "abcd"
                      Problems: "abcd"
                      Notes: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Implemented: "abcd"
                      Problems: "abcd"
                      Notes: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestoneReport'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/MilestonePeriodService.ts:
    get:
      summary: List MilestonePeriod
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestonePeriod'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create MilestonePeriod
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestonePeriod'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestonePeriod'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/MilestonePeriodService.ts/{id}:
    get:
      summary: Get MilestonePeriod by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestonePeriod'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update MilestonePeriod by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestonePeriod'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestonePeriod'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete MilestonePeriod by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/MilestonePeriodService.ts/count:
    get:
      summary: Count the number of MilestonePeriod
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of MilestonePeriod by MilestonePeriodFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestonePeriodFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Range: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Range: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/MilestonePeriodService.ts/search:
    post:
      summary: Search MilestonePeriod by MilestonePeriodFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MilestonePeriodFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Range: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Range: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/MilestonePeriod'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ForecastService.ts:
    get:
      summary: List Forecast
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Forecast'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Forecast
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forecast'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forecast'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ForecastService.ts/{id}:
    get:
      summary: Get Forecast by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Forecast'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Forecast by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forecast'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forecast'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Forecast by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ForecastService.ts/count:
    get:
      summary: Count the number of Forecast
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Forecast by ForecastFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForecastFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ForecastService.ts/search:
    post:
      summary: Search Forecast by ForecastFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForecastFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Forecast'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ExpenseService.ts:
    get:
      summary: List Expense
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Expense'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Expense
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ExpenseService.ts/{id}:
    get:
      summary: Get Expense by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Expense'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Expense by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Expense by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ExpenseService.ts/count:
    get:
      summary: Count the number of Expense
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Expense by ExpenseFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/ExpenseService.ts/search:
    post:
      summary: Search Expense by ExpenseFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Expense'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ExpenseCategoryService.ts:
    get:
      summary: List ExpenseCategory
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ExpenseCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ExpenseCategory
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategory'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ExpenseCategoryService.ts/{id}:
    get:
      summary: Get ExpenseCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ExpenseCategory'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ExpenseCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategory'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategory'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ExpenseCategory by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ExpenseCategoryService.ts/count:
    get:
      summary: Count the number of ExpenseCategory
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ExpenseCategory by ExpenseCategoryFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategoryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ExpenseCategoryService.ts/search:
    post:
      summary: Search ExpenseCategory by ExpenseCategoryFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCategoryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ExpenseCategory'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/DeliverableService.ts:
    get:
      summary: List Deliverable
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Deliverable'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Deliverable
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deliverable'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deliverable'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/DeliverableService.ts/{id}:
    get:
      summary: Get Deliverable by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Deliverable'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Deliverable by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deliverable'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deliverable'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Deliverable by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Deliverable
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/DeliverableService.ts/count:
    get:
      summary: Count the number of Deliverable
      tags:
        - Deliverable
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Deliverable by DeliverableFilterOptions
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverableFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Deliverable/DeliverableService.ts/search:
    post:
      summary: Search Deliverable by DeliverableFilterOptions
      tags:
        - Deliverable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverableFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Deliverable'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Task/TaskService.ts:
    get:
      summary: List Task
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Task
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Task'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Task
      tags:
        - Task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Task/TaskService.ts/{id}:
    get:
      summary: Get Task by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Task
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Task'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Task by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Task by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Task
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Task/TaskService.ts/count:
    get:
      summary: Count the number of Task
      tags:
        - Task
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Task by TaskFilterOptions
      tags:
        - Task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Task/TaskService.ts/search:
    post:
      summary: Search Task by TaskFilterOptions
      tags:
        - Task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Task'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/VarianceAnalysisService.ts:
    get:
      summary: List VarianceAnalysis
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/VarianceAnalysis'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create VarianceAnalysis
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VarianceAnalysis'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VarianceAnalysis'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/VarianceAnalysisService.ts/{id}:
    get:
      summary: Get VarianceAnalysis by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/VarianceAnalysis'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update VarianceAnalysis by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VarianceAnalysis'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VarianceAnalysis'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete VarianceAnalysis by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Project
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/VarianceAnalysisService.ts/count:
    get:
      summary: Count the number of VarianceAnalysis
      tags:
        - Project
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of VarianceAnalysis by VarianceAnalysisFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VarianceAnalysisFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Reason: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Reason: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/Project/VarianceAnalysisService.ts/search:
    post:
      summary: Search VarianceAnalysis by VarianceAnalysisFilterOptions
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VarianceAnalysisFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Reason: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Reason: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/VarianceAnalysis'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ApprovalStatusService.ts:
    get:
      summary: List ApprovalStatus
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ApprovalStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create ApprovalStatus
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalStatus'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ApprovalStatusService.ts/{id}:
    get:
      summary: Get ApprovalStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ApprovalStatus'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update ApprovalStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalStatus'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalStatus'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete ApprovalStatus by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ApprovalStatusService.ts/count:
    get:
      summary: Count the number of ApprovalStatus
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of ApprovalStatus by ApprovalStatusFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalStatusFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/ApprovalStatusService.ts/search:
    post:
      summary: Search ApprovalStatus by ApprovalStatusFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalStatusFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ApprovalStatus'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/TaskDependency/TaskDependencyService.ts:
    get:
      summary: List TaskDependency
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - TaskDependency
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/TaskDependency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create TaskDependency
      tags:
        - TaskDependency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDependency'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDependency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/TaskDependency/TaskDependencyService.ts/{id}:
    get:
      summary: Get TaskDependency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - TaskDependency
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/TaskDependency'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update TaskDependency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - TaskDependency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDependency'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDependency'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete TaskDependency by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - TaskDependency
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/TaskDependency/TaskDependencyService.ts/count:
    get:
      summary: Count the number of TaskDependency
      tags:
        - TaskDependency
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of TaskDependency by TaskDependencyFilterOptions
      tags:
        - TaskDependency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDependencyFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/TaskDependency/TaskDependencyService.ts/search:
    post:
      summary: Search TaskDependency by TaskDependencyFilterOptions
      tags:
        - TaskDependency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDependencyFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/TaskDependency'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/DependencyTypeService.ts:
    get:
      summary: List DependencyType
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/DependencyType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create DependencyType
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyType'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/DependencyTypeService.ts/{id}:
    get:
      summary: Get DependencyType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/DependencyType'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update DependencyType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyType'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyType'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete DependencyType by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - entities
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/DependencyTypeService.ts/count:
    get:
      summary: Count the number of DependencyType
      tags:
        - entities
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of DependencyType by DependencyTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyTypeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/entities/DependencyTypeService.ts/search:
    post:
      summary: Search DependencyType by DependencyTypeFilterOptions
      tags:
        - entities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyTypeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/DependencyType'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/WorkPackage/WorkPackageService.ts:
    get:
      summary: List WorkPackage
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - WorkPackage
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/WorkPackage'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create WorkPackage
      tags:
        - WorkPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkPackage'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkPackage'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/WorkPackage/WorkPackageService.ts/{id}:
    get:
      summary: Get WorkPackage by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - WorkPackage
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/WorkPackage'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update WorkPackage by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - WorkPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkPackage'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkPackage'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete WorkPackage by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - WorkPackage
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/WorkPackage/WorkPackageService.ts/count:
    get:
      summary: Count the number of WorkPackage
      tags:
        - WorkPackage
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of WorkPackage by WorkPackageFilterOptions
      tags:
        - WorkPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkPackageFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /codbex-projects/gen/codbex-projects/api/WorkPackage/WorkPackageService.ts/search:
    post:
      summary: Search WorkPackage by WorkPackageFilterOptions
      tags:
        - WorkPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkPackageFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Description: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Description: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/WorkPackage'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Resource:
      type: object
      required:
        - Name
        - Project
        - ResourceType
        - ResourceItem
        - Quantity
        - Prize
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        ResourceType:
          type: integer
          format: int32
        ResourceItem:
          type: string
          minLength: 0
          maxLength: 200
        Quantity:
          type: number
          format: double
        Prize:
          type: number
          format: double
    ResourceFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ResourceType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ResourceItem:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Quantity:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Prize:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ResourceType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ResourceItem:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Quantity:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Prize:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                ResourceType:
                ResourceItem:
                  type: string
                  minLength: 0
                  maxLength: 200
                Quantity:
                Prize:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ResourceType:
                  type: integer
                  format: int32
                ResourceItem:
                  type: string
                  minLength: 0
                  maxLength: 200
                Quantity:
                  type: number
                  format: double
                Prize:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ResourceType:
                  type: integer
                  format: int32
                ResourceItem:
                  type: string
                  minLength: 0
                  maxLength: 200
                Quantity:
                  type: number
                  format: double
                Prize:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ResourceType:
                  type: integer
                  format: int32
                ResourceItem:
                  type: string
                  minLength: 0
                  maxLength: 200
                Quantity:
                  type: number
                  format: double
                Prize:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ResourceType:
                  type: integer
                  format: int32
                ResourceItem:
                  type: string
                  minLength: 0
                  maxLength: 200
                Quantity:
                  type: number
                  format: double
                Prize:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "Name", "Project", "ResourceType", "ResourceItem", "Quantity", "Prize"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,ResourceType,ResourceItem,Quantity,Prize"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Project:
      type: object
      required:
        - Name
        - Employee
        - StartingDate
        - EndDate
        - MilestonePeriod
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 40
        Description:
          type: string
          minLength: 0
          maxLength: 200
        Employee:
          type: integer
          format: int32
        StartingDate:
        EndDate:
        MilestonePeriod:
          type: integer
          format: int32
        Version:
          type: number
          format: double
        Notes:
          type: string
          minLength: 0
          maxLength: 200
    ProjectFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StartingDate:
                  oneOf:
                EndDate:
                  oneOf:
                MilestonePeriod:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Version:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StartingDate:
                  oneOf:
                EndDate:
                  oneOf:
                MilestonePeriod:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Version:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Employee:
                StartingDate:
                EndDate:
                MilestonePeriod:
                Version:
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 200
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Employee:
                  type: integer
                  format: int32
                StartingDate:
                EndDate:
                MilestonePeriod:
                  type: integer
                  format: int32
                Version:
                  type: number
                  format: double
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 200
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Employee:
                  type: integer
                  format: int32
                StartingDate:
                EndDate:
                MilestonePeriod:
                  type: integer
                  format: int32
                Version:
                  type: number
                  format: double
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 200
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Employee:
                  type: integer
                  format: int32
                StartingDate:
                EndDate:
                MilestonePeriod:
                  type: integer
                  format: int32
                Version:
                  type: number
                  format: double
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 200
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Employee:
                  type: integer
                  format: int32
                StartingDate:
                EndDate:
                MilestonePeriod:
                  type: integer
                  format: int32
                Version:
                  type: number
                  format: double
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 200
        $select:
          type: array
          example: ["Id", "Name", "Description", "Employee", "StartingDate", "EndDate", "MilestonePeriod", "Version", "Notes"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Description,Employee,StartingDate,EndDate,MilestonePeriod,Version,Notes"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Status:
      type: object
      required:
        - Name
        - Project
        - StatusType
        - MilestoneReport
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        StatusType:
          type: integer
          format: int32
        MilestoneReport:
          type: integer
          format: int32
    StatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StatusType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                MilestoneReport:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StatusType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                MilestoneReport:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                StatusType:
                MilestoneReport:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                StatusType:
                  type: integer
                  format: int32
                MilestoneReport:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                StatusType:
                  type: integer
                  format: int32
                MilestoneReport:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                StatusType:
                  type: integer
                  format: int32
                MilestoneReport:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                StatusType:
                  type: integer
                  format: int32
                MilestoneReport:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Project", "StatusType", "MilestoneReport"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,StatusType,MilestoneReport"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ResourceType:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    ResourceTypeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    StatusType:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    StatusTypeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Budget:
      type: object
      required:
        - Name
        - InitialBudget
        - CostEstimation
        - ContingencyReserves
        - IsApproved
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        InitialBudget:
          type: number
          format: double
        CostEstimation:
          type: number
          format: double
        ContingencyReserves:
          type: number
          format: double
        ManagementReserves:
          type: number
          format: double
        IsApproved:
          type: boolean
    BudgetFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                InitialBudget:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostEstimation:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ContingencyReserves:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ManagementReserves:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                IsApproved:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                InitialBudget:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostEstimation:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ContingencyReserves:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ManagementReserves:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                IsApproved:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                InitialBudget:
                CostEstimation:
                ContingencyReserves:
                ManagementReserves:
                IsApproved:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                InitialBudget:
                  type: number
                  format: double
                CostEstimation:
                  type: number
                  format: double
                ContingencyReserves:
                  type: number
                  format: double
                ManagementReserves:
                  type: number
                  format: double
                IsApproved:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                InitialBudget:
                  type: number
                  format: double
                CostEstimation:
                  type: number
                  format: double
                ContingencyReserves:
                  type: number
                  format: double
                ManagementReserves:
                  type: number
                  format: double
                IsApproved:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                InitialBudget:
                  type: number
                  format: double
                CostEstimation:
                  type: number
                  format: double
                ContingencyReserves:
                  type: number
                  format: double
                ManagementReserves:
                  type: number
                  format: double
                IsApproved:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                InitialBudget:
                  type: number
                  format: double
                CostEstimation:
                  type: number
                  format: double
                ContingencyReserves:
                  type: number
                  format: double
                ManagementReserves:
                  type: number
                  format: double
                IsApproved:
        $select:
          type: array
          example: ["Id", "Name", "Project", "InitialBudget", "CostEstimation", "ContingencyReserves", "ManagementReserves", "IsApproved"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,InitialBudget,CostEstimation,ContingencyReserves,ManagementReserves,IsApproved"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Cost:
      type: object
      required:
        - Name
        - Project
        - ActualCost
        - CostCategory
        - CommitmentDate
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        ActualCost:
          type: number
          format: double
        CostCategory:
          type: integer
          format: int32
        Description:
          type: string
          minLength: 0
          maxLength: 200
        CommitmentDate:
        IsCommitted:
          type: boolean
    CostFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostCategory:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                CommitmentDate:
                  oneOf:
                IsCommitted:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostCategory:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                CommitmentDate:
                  oneOf:
                IsCommitted:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                ActualCost:
                CostCategory:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                CommitmentDate:
                IsCommitted:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ActualCost:
                  type: number
                  format: double
                CostCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                CommitmentDate:
                IsCommitted:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ActualCost:
                  type: number
                  format: double
                CostCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                CommitmentDate:
                IsCommitted:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ActualCost:
                  type: number
                  format: double
                CostCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                CommitmentDate:
                IsCommitted:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ActualCost:
                  type: number
                  format: double
                CostCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                CommitmentDate:
                IsCommitted:
        $select:
          type: array
          example: ["Id", "Name", "Project", "ActualCost", "CostCategory", "Description", "CommitmentDate", "IsCommitted"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,ActualCost,CostCategory,Description,CommitmentDate,IsCommitted"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CostCategory:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    CostCategoryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    MilestoneReport:
      type: object
      required:
        - Name
        - Implemented
        - Problems
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Implemented:
          type: string
          minLength: 0
          maxLength: 200
        Problems:
          type: string
          minLength: 0
          maxLength: 200
        Notes:
          type: string
          minLength: 0
          maxLength: 100
        Deliverable:
          type: integer
          format: int32
    MilestoneReportFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Implemented:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Problems:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Deliverable:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Implemented:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Problems:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Notes:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Deliverable:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Implemented:
                  type: string
                  minLength: 0
                  maxLength: 200
                Problems:
                  type: string
                  minLength: 0
                  maxLength: 200
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 100
                Deliverable:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Implemented:
                  type: string
                  minLength: 0
                  maxLength: 200
                Problems:
                  type: string
                  minLength: 0
                  maxLength: 200
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 100
                Deliverable:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Implemented:
                  type: string
                  minLength: 0
                  maxLength: 200
                Problems:
                  type: string
                  minLength: 0
                  maxLength: 200
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 100
                Deliverable:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Implemented:
                  type: string
                  minLength: 0
                  maxLength: 200
                Problems:
                  type: string
                  minLength: 0
                  maxLength: 200
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 100
                Deliverable:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Implemented:
                  type: string
                  minLength: 0
                  maxLength: 200
                Problems:
                  type: string
                  minLength: 0
                  maxLength: 200
                Notes:
                  type: string
                  minLength: 0
                  maxLength: 100
                Deliverable:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Implemented", "Problems", "Notes", "Deliverable"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Implemented,Problems,Notes,Deliverable"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    MilestonePeriod:
      type: object
      required:
        - Name
        - Range
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 40
        Range:
          type: string
          minLength: 0
          maxLength: 20
        Count:
          type: integer
          format: int32
    MilestonePeriodFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Range:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Count:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Range:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Count:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Range:
                  type: string
                  minLength: 0
                  maxLength: 20
                Count:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Range:
                  type: string
                  minLength: 0
                  maxLength: 20
                Count:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Range:
                  type: string
                  minLength: 0
                  maxLength: 20
                Count:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Range:
                  type: string
                  minLength: 0
                  maxLength: 20
                Count:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Range:
                  type: string
                  minLength: 0
                  maxLength: 20
                Count:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Range", "Count"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Range,Count"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Forecast:
      type: object
      required:
        - Name
        - Project
        - ForecastedCost
        - EarnedValue
        - CostPerformanceIndex
        - SchedulePerformanceIndex
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        ForecastedCost:
          type: number
          format: double
        ForecastDate:
        Description:
          type: string
          minLength: 0
          maxLength: 200
        EarnedValue:
          type: number
          format: double
        CostPerformanceIndex:
          type: number
          format: double
        SchedulePerformanceIndex:
          type: number
          format: double
    ForecastFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ForecastedCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ForecastDate:
                  oneOf:
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                EarnedValue:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostPerformanceIndex:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                SchedulePerformanceIndex:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ForecastedCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ForecastDate:
                  oneOf:
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                EarnedValue:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostPerformanceIndex:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                SchedulePerformanceIndex:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                ForecastedCost:
                ForecastDate:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                EarnedValue:
                CostPerformanceIndex:
                SchedulePerformanceIndex:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ForecastedCost:
                  type: number
                  format: double
                ForecastDate:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                EarnedValue:
                  type: number
                  format: double
                CostPerformanceIndex:
                  type: number
                  format: double
                SchedulePerformanceIndex:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ForecastedCost:
                  type: number
                  format: double
                ForecastDate:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                EarnedValue:
                  type: number
                  format: double
                CostPerformanceIndex:
                  type: number
                  format: double
                SchedulePerformanceIndex:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ForecastedCost:
                  type: number
                  format: double
                ForecastDate:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                EarnedValue:
                  type: number
                  format: double
                CostPerformanceIndex:
                  type: number
                  format: double
                SchedulePerformanceIndex:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                ForecastedCost:
                  type: number
                  format: double
                ForecastDate:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                EarnedValue:
                  type: number
                  format: double
                CostPerformanceIndex:
                  type: number
                  format: double
                SchedulePerformanceIndex:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "Name", "Project", "ForecastedCost", "ForecastDate", "Description", "EarnedValue", "CostPerformanceIndex", "SchedulePerformanceIndex"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,ForecastedCost,ForecastDate,Description,EarnedValue,CostPerformanceIndex,SchedulePerformanceIndex"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Expense:
      type: object
      required:
        - Name
        - Project
        - Employee
        - ExpenseCategory
        - Amount
        - Date
        - ApprovalStatus
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
        Project:
          type: integer
          format: int32
        Employee:
          type: integer
          format: int32
        ExpenseCategory:
          type: integer
          format: int32
        Description:
          type: string
          minLength: 0
          maxLength: 200
        Amount:
          type: number
          format: double
        Date:
        ApprovalStatus:
          type: integer
          format: int32
    ExpenseFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ExpenseCategory:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Date:
                  oneOf:
                ApprovalStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Employee:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                ExpenseCategory:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Date:
                  oneOf:
                ApprovalStatus:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                Employee:
                ExpenseCategory:
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Amount:
                Date:
                ApprovalStatus:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                ExpenseCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Amount:
                  type: number
                  format: double
                Date:
                ApprovalStatus:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                ExpenseCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Amount:
                  type: number
                  format: double
                Date:
                ApprovalStatus:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                ExpenseCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Amount:
                  type: number
                  format: double
                Date:
                ApprovalStatus:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
                Project:
                  type: integer
                  format: int32
                Employee:
                  type: integer
                  format: int32
                ExpenseCategory:
                  type: integer
                  format: int32
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Amount:
                  type: number
                  format: double
                Date:
                ApprovalStatus:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Project", "Employee", "ExpenseCategory", "Description", "Amount", "Date", "ApprovalStatus"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,Employee,ExpenseCategory,Description,Amount,Date,ApprovalStatus"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ExpenseCategory:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 20
    ExpenseCategoryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 20
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 20
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 20
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Deliverable:
      type: object
      required:
        - Name
        - Description
        - Project
        - CostEstimation
        - ActualCost
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 30
        Description:
          type: string
          minLength: 0
          maxLength: 200
        Project:
          type: integer
          format: int32
        CostEstimation:
          type: number
          format: double
        ActualCost:
          type: number
          format: double
        Resource:
          type: integer
          format: int32
    DeliverableFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CostEstimation:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Resource:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CostEstimation:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Resource:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Project:
                CostEstimation:
                ActualCost:
                Resource:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Project:
                  type: integer
                  format: int32
                CostEstimation:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                Resource:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Project:
                  type: integer
                  format: int32
                CostEstimation:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                Resource:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Project:
                  type: integer
                  format: int32
                CostEstimation:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                Resource:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Project:
                  type: integer
                  format: int32
                CostEstimation:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                Resource:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Description", "Project", "CostEstimation", "ActualCost", "Resource"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Description,Project,CostEstimation,ActualCost,Resource"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Task:
      type: object
      required:
        - Name
        - Description
        - Deliverable
        - Status
        - StartDate
        - EndDate
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 30
        Description:
          type: string
          minLength: 0
          maxLength: 200
        Deliverable:
          type: integer
          format: int32
        Status:
          type: integer
          format: int32
        StartDate:
        EndDate:
        Resource:
          type: integer
          format: int32
    TaskFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Deliverable:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StartDate:
                  oneOf:
                EndDate:
                  oneOf:
                Resource:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Deliverable:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Status:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                StartDate:
                  oneOf:
                EndDate:
                  oneOf:
                Resource:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Deliverable:
                Status:
                StartDate:
                EndDate:
                Resource:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Deliverable:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                StartDate:
                EndDate:
                Resource:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Deliverable:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                StartDate:
                EndDate:
                Resource:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Deliverable:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                StartDate:
                EndDate:
                Resource:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Deliverable:
                  type: integer
                  format: int32
                Status:
                  type: integer
                  format: int32
                StartDate:
                EndDate:
                Resource:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Description", "Deliverable", "Status", "StartDate", "EndDate", "Resource"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Description,Deliverable,Status,StartDate,EndDate,Resource"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    VarianceAnalysis:
      type: object
      required:
        - Name
        - PlannedCost
        - ActualCost
        - CostVariance
        - AnalysisDate
        - Reason
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 40
        Project:
          type: integer
          format: int32
        PlannedCost:
          type: number
          format: double
        ActualCost:
          type: number
          format: double
        CostVariance:
          type: number
          format: double
        AnalysisDate:
        Reason:
          type: string
          minLength: 0
          maxLength: 200
    VarianceAnalysisFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                PlannedCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostVariance:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                AnalysisDate:
                  oneOf:
                Reason:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Project:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                PlannedCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                ActualCost:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                CostVariance:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                AnalysisDate:
                  oneOf:
                Reason:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Project:
                PlannedCost:
                ActualCost:
                CostVariance:
                AnalysisDate:
                Reason:
                  type: string
                  minLength: 0
                  maxLength: 200
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Project:
                  type: integer
                  format: int32
                PlannedCost:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                CostVariance:
                  type: number
                  format: double
                AnalysisDate:
                Reason:
                  type: string
                  minLength: 0
                  maxLength: 200
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Project:
                  type: integer
                  format: int32
                PlannedCost:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                CostVariance:
                  type: number
                  format: double
                AnalysisDate:
                Reason:
                  type: string
                  minLength: 0
                  maxLength: 200
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Project:
                  type: integer
                  format: int32
                PlannedCost:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                CostVariance:
                  type: number
                  format: double
                AnalysisDate:
                Reason:
                  type: string
                  minLength: 0
                  maxLength: 200
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Project:
                  type: integer
                  format: int32
                PlannedCost:
                  type: number
                  format: double
                ActualCost:
                  type: number
                  format: double
                CostVariance:
                  type: number
                  format: double
                AnalysisDate:
                Reason:
                  type: string
                  minLength: 0
                  maxLength: 200
        $select:
          type: array
          example: ["Id", "Name", "Project", "PlannedCost", "ActualCost", "CostVariance", "AnalysisDate", "Reason"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Project,PlannedCost,ActualCost,CostVariance,AnalysisDate,Reason"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    ApprovalStatus:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 40
    ApprovalStatusFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    TaskDependency:
      type: object
      required:
        - Name
        - PredecessorTask
        - SuccessorTask
        - DependencyType
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 30
        PredecessorTask:
          type: integer
          format: int32
        SuccessorTask:
          type: integer
          format: int32
        DependencyType:
          type: integer
          format: int32
    TaskDependencyFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                PredecessorTask:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SuccessorTask:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                DependencyType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
                PredecessorTask:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SuccessorTask:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                DependencyType:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                PredecessorTask:
                SuccessorTask:
                DependencyType:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                PredecessorTask:
                  type: integer
                  format: int32
                SuccessorTask:
                  type: integer
                  format: int32
                DependencyType:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                PredecessorTask:
                  type: integer
                  format: int32
                SuccessorTask:
                  type: integer
                  format: int32
                DependencyType:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                PredecessorTask:
                  type: integer
                  format: int32
                SuccessorTask:
                  type: integer
                  format: int32
                DependencyType:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
                PredecessorTask:
                  type: integer
                  format: int32
                SuccessorTask:
                  type: integer
                  format: int32
                DependencyType:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "PredecessorTask", "SuccessorTask", "DependencyType"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,PredecessorTask,SuccessorTask,DependencyType"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    DependencyType:
      type: object
      required:
        - Name
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 30
    DependencyTypeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 30
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 30
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 30
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    WorkPackage:
      type: object
      required:
        - Name
        - Description
        - Task
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 40
        Description:
          type: string
          minLength: 0
          maxLength: 200
        Task:
          type: integer
          format: int32
    WorkPackageFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Task:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 40
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 40
                Description:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 200
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 200
                Task:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Task:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Task:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Task:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Task:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 40
                Description:
                  type: string
                  minLength: 0
                  maxLength: 200
                Task:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Description", "Task"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Description,Task"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string